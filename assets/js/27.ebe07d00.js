(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{380:function(s,t,a){"use strict";a.r(t);var n=a(25),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"泛型概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型概念"}},[s._v("🎋")]),s._v(" 泛型概念")]),s._v(" "),a("h3",{attrs:{id:"泛型是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型是什么"}},[s._v("🎋")]),s._v(" 泛型是什么")]),s._v(" "),a("p",[s._v("简言之，泛型是一种类型的抽象，它允许类型（类、接口）作为定义类、接口和方法的参数。使用泛型，我们可以通过这种强类型检查在 Java 编译阶段就发现错误，而不是等到运行时阶段（编译阶段检查并处理错误更容易点儿）；可以避免类型强转可能引发的运行时错误；可以实现一些通用的模板方法，并且它是类型安全和易读的。这三点一开始可能并不明晰，但是在之后的阅读中会深有体会。")]),s._v(" "),a("h3",{attrs:{id:"泛型命名规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型命名规范"}},[s._v("🎋")]),s._v(" 泛型命名规范")]),s._v(" "),a("ul",[a("li",[s._v("T - Type")]),s._v(" "),a("li",[s._v("S,U,V etc. - 2nd, 3rd, 4th types")]),s._v(" "),a("li",[s._v("E - Element (used extensively by the Java Collections Framework)")]),s._v(" "),a("li",[s._v("N - Number")]),s._v(" "),a("li",[s._v("K - Key")]),s._v(" "),a("li",[s._v("V - Value")])]),s._v(" "),a("h2",{attrs:{id:"类型推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[s._v("🎋")]),s._v(" 类型推断")]),s._v(" "),a("p",[s._v("Java编译器通过类型推断算法来判断类型。下面是具体示例：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 泛型声明\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、已知泛型类型（泛型类 S 声明），可以直接使用此泛型类型")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、新的泛型方法，需要使用 <> 声明泛型类型 T")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethodType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、声明泛型构造器 X")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("X")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 类型推断示例\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("infer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、实例化泛型类")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringDemo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// JDK 7 以前需使用尖括号声明泛型类类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringDemo2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// JDK 7 及以后可以省略泛型类类型")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、类型推断会自动选择最适合的类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),s._v(" methodType "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stringDemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethodType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里传入两个不同类型的值，它返回两个类型公共的父类型")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、泛型构造器，根据参数类型来推断类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringDemo3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// JDK 7 及以后可以省略泛型类类型")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4、泛型方法，根据参数值类型推断类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" classType1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stringDemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 泛型类型可省略")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" classType2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stringDemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5、根据目标类型推断类型(这里目标类型为值为 String 的 List)")]),s._v("\n        stringDemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("emptyList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// JDK 8 以前需要指明泛型类型")]),s._v("\n        stringDemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("emptyList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// JDK 8 及以后可以省略泛型类型")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6、根据返回值类型推断类型")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("emptyList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br")])]),a("h2",{attrs:{id:"类型传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型传递"}},[s._v("🎋")]),s._v(" 类型传递")]),s._v(" "),a("p",[s._v("泛型类型也支持通过继承泛型父类或者实现泛型接口来传递泛型类型，比如"),a("code",[s._v("ArrayList<T>")]),s._v("继承自"),a("code",[s._v("List<T>")]),s._v("。")]),s._v(" "),a("p",[s._v("泛型类型也支持类似多态的类型转换，只要类型兼容，则可以将子类类型赋值给父类类型，比如以下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Demo<Number> demo = new Demo<>(new Integer(1));")])]),s._v(" "),a("li",[a("code",[s._v("List<? extends Integer> intList = new ArrayList<>(); List<? extends Number> numList = intList;")])])]),s._v(" "),a("h2",{attrs:{id:"有界类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有界类型"}},[s._v("🎋")]),s._v(" 有界类型")]),s._v(" "),a("p",[s._v("可以使用 extends 关键字来限制类型为某个类的子类或接口的实现类，如"),a("code",[s._v("<T extends A>")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("如果声明多个限制，要保证顺序，先是类，然后是接口，如"),a("code",[s._v("<T extends A & B & C>")]),s._v("，A 代表某个类 A，在接口 B 和接口 C 前面声明")]),s._v(" "),a("li",[s._v("比如如果要比较两个泛型对象的大小，不能直接使用操作运算符，但是可以声明是 Comparable 泛型接口的子类型"),a("code",[s._v("<T extends Comparable<T>>")]),s._v("，然后就可以使用 compareTo 方法来比较两个泛型对象的大小了")])]),s._v(" "),a("h2",{attrs:{id:"通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[s._v("🎋")]),s._v(" 通配符")]),s._v(" "),a("p",[s._v("类型通配符 ? 通常作为参数、属性或局部变量的类型。它和类型参数还是有区别的，通用模板方法等使用显式类型参数来表示方法的参数类型和返回值类型的依赖性，如果没有这种依赖性，则应该使用更灵活的子类型化——通配符。")]),s._v(" "),a("h3",{attrs:{id:"上界通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上界通配符"}},[s._v("🎋")]),s._v(" 上界通配符")]),s._v(" "),a("ul",[a("li",[s._v("上界通配符用来放宽对变量的限制，表示可接受的类型为未知类型的子类型或其实现类")]),s._v(" "),a("li",[s._v("使用方式为"),a("code",[s._v("<? extends ParentType>")])])]),s._v(" "),a("h3",{attrs:{id:"无界通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无界通配符"}},[s._v("🎋")]),s._v(" 无界通配符")]),s._v(" "),a("ul",[a("li",[s._v("表示未知类型，")]),s._v(" "),a("li",[s._v("使用方式为"),a("code",[s._v("<?>")])]),s._v(" "),a("li",[s._v("适用场景：\n"),a("ul",[a("li",[s._v("可接受 Object 类型的方法")]),s._v(" "),a("li",[s._v("方法不依赖于泛型类型，比如只返回集合元素的个数")])])])]),s._v(" "),a("h3",{attrs:{id:"下界通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下界通配符"}},[s._v("🎋")]),s._v(" 下界通配符")]),s._v(" "),a("ul",[a("li",[s._v("表示可接受的类型为未知类型的超级类型")]),s._v(" "),a("li",[s._v("使用方式为"),a("code",[s._v("<? super SubType>")])])]),s._v(" "),a("h3",{attrs:{id:"通配符捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符捕获"}},[s._v("🎋")]),s._v(" 通配符捕获")]),s._v(" "),a("p",[s._v("当我们直接处理未知类型的 <?> 的参数时，编译器会提示类型不兼容"),a("code",[s._v("capture of ?")]),s._v("，这时候我们可以通过特殊方法将未知类型 ? 转化为泛型类型，这种方式将通配符的未知类型作为普通泛型类型使用。示例：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"通配符疑点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符疑点"}},[s._v("🎋")]),s._v(" 通配符疑点")]),s._v(" "),a("p",[s._v("含有通配符 ? 定义的 List，不能直接插入除 null 以外的元素，因为任何类型的值都可以为 null，插入一个元素到一个未知类型的集合中，这是不安全的，所以，你可以执行 clear 方法或者使用迭代器执行 remove 方法，或者通过捕获通配符来插入从该集合读取的元素。")]),s._v(" "),a("h3",{attrs:{id:"通配符使用指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符使用指南"}},[s._v("🎋")]),s._v(" 通配符使用指南")]),s._v(" "),a("p",[s._v("入操作的变量，形如输入流，作为输入源；出操作的变量，形如输出流，作为输出源")]),s._v(" "),a("ul",[a("li",[s._v("表示入操作的变量，需要时应使用上界通配符")]),s._v(" "),a("li",[s._v("表示出操作的变量，需要时应使用下界通配符")]),s._v(" "),a("li",[s._v("使用 Object 类的方法访问表示入操作的变量，应使用无界通配符")]),s._v(" "),a("li",[s._v("如果一个变量进行出入两种操作，则不要使用通配符")]),s._v(" "),a("li",[s._v("作为返回类型使用，应使用上界通配符，来给调用者更大的灵活性")]),s._v(" "),a("li",[s._v("仅作为参数使用，应使用下界通配符")])]),s._v(" "),a("h2",{attrs:{id:"类型擦除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[s._v("🎋")]),s._v(" 类型擦除")]),s._v(" "),a("p",[s._v("Java 引入泛型以便在编译期提供更严格的类型检查并支持泛型编程。Java 编译器通过类型擦除来实现泛型，确保类型擦除不会为参数化类型产生新类（不会产生运行时开销）。具体操作：")]),s._v(" "),a("ul",[a("li",[s._v("对于无限类型的方法参数或泛型类型，Java编译器会将其类型替换为边界类型或者 Object 类型")]),s._v(" "),a("li",[s._v("必要时插入类型转换来保证类型安全")]),s._v(" "),a("li",[s._v("生成桥方法以保留扩展泛型类型的多态性")])]),s._v(" "),a("p",[s._v("注意事项：")]),s._v(" "),a("ul",[a("li",[s._v("防止产生堆污染带来的类型转换异常（ClassCastException）")]),s._v(" "),a("li",[s._v("避免未经检查的警告，明确指明类型")])]),s._v(" "),a("h2",{attrs:{id:"泛型使用限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型使用限制"}},[s._v("🎋")]),s._v(" 泛型使用限制")]),s._v(" "),a("ol",[a("li",[s._v("不能将泛型类型实例化为基本类型，而应该实例化为基本类型的包装类型。")]),s._v(" "),a("li",[s._v("泛型类不能直接或间接继承 Throwable 类；方法不能捕获泛型异常类型的实例，但是可以 throws 抛出此类型实例。")]),s._v(" "),a("li",[s._v("以泛型参数类型作为参数列表的方法，不能按参数类型重载。")]),s._v(" "),a("li",[s._v("要特别注意的是，泛型可以说是一种规范，它通过强制编译期错误来避免可能的运行时错误。")]),s._v(" "),a("li",[s._v("泛型类相当于对不同的参数提供相同的行为，泛型参数并没有改变类的类型，它代表的是类的对象的类型。泛型类在所有实例中是共享的，比如"),a("code",[s._v('new ArrayList<>("1").getClass() == new ArrayList<>(1).getClass()')]),s._v("一直为 true。由于类变量和类方法是类的实例所共有的，所以对于（static 声明）静态代码块及类变量和类方法声明为泛型类型是不合法的（不同泛型参数的实例会对静态变量进行修改，导致堆污染）。")]),s._v(" "),a("li",[s._v("不同泛型参数的实例之间是不能直接 Casts 强转的，但是原始类型可以强转为泛型类型，但是这是不安全的，会提示未经检查的警告。")]),s._v(" "),a("li",[s._v("不能使用 instanceof 运算符来判断某个实例是否为泛型类的实例，因为运行时进行类型擦除，不会去比较泛型类型，只会比较类类型的关系，但是可以判断某个实例是否为无界通配符修饰的类，如 List<?>，因为无界通配符表示未知的类型。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);