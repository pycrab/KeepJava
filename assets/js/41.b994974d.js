(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{394:function(a,t,s){"use strict";s.r(t);var n=s(25),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"什么是序列化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是序列化"}},[a._v("🎋")]),a._v(" 什么是序列化")]),a._v(" "),s("p",[a._v("序列化就是把对象及其状态变成可以存取的形式（保存到文件、在网络中发送等），反序列化就是恢复对象的过程。")]),a._v(" "),s("p",[a._v("为什么要序列化呢？序列化和反序列化是一种规则，就像编码和解码一样，保证对象在传播过程中是不变的（完整性）。")]),a._v(" "),s("h2",{attrs:{id:"java-中的序列化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-中的序列化"}},[a._v("🎋")]),a._v(" Java 中的序列化")]),a._v(" "),s("p",[a._v("Java 默认的序列化机制为：将每个可序列化的对象、对象状态及引用对象转变成字节序列，反序列化就是将字节序列恢复为可反序列化的对象。")]),a._v(" "),s("h3",{attrs:{id:"java-默认序列化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-默认序列化"}},[a._v("🎋")]),a._v(" Java 默认序列化")]),a._v(" "),s("p",[a._v("要使用 Java 进行自动序列化，需要注意以下几点：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("类需要实现 Serializable 接口或者 Externalizable 接口以允许对象序列化和反序列化，否则 会报 NotSerializableException 异常")])]),a._v(" "),s("li",[s("p",[a._v("声明为 static（类的属性，非对象属性）或 transient （临时的）的属性不会序列化")])]),a._v(" "),s("li",[s("p",[a._v("如果可序列化的属性引用了其它对象，则引用的对象也需要是可序列化的，否则会报 NotSerializableException 异常")])]),a._v(" "),s("li",[s("p",[a._v("如果没有声明 serialVersionUID 属性（private static final long 类型），序列化时会根据对象自动生成，反序列化时也会根据现有的类自动生成并进行对比，不一致会反序列化失败抛出 InvalidClassException 异常")]),a._v(" "),s("blockquote",[s("p",[a._v("建议手动指定该属性，防止由于平台不同或者类属性变动导致已序列化的对象无法恢复。")]),a._v(" "),s("p",[a._v("当然指定了也可以修改，相当于版本号，用于告知对象不一致需要升级。")])])]),a._v(" "),s("li",[s("p",[a._v("声明为可序列化类的子类也会继承变为可序列化的类；但是如果父类没有声明可序列化，子类声明了，则只序列化字类")])]),a._v(" "),s("li",[s("p",[a._v("枚举类的序列化不同于普通类，枚举常量的序列化只由其名称组成，常量的字段值不序列化；枚举常量的序列化过程无法自定义")])]),a._v(" "),s("li",[s("p",[a._v("反序列化时，必须有原始类作为模板进行恢复还原，否则会报 ClassNotFoundException 异常")])])]),a._v(" "),s("p",[a._v("可知，Java 中的基础类型的包装类、String 类、大部分集合类、File 类等都支持序列化。")]),a._v(" "),s("h3",{attrs:{id:"自定义序列化过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义序列化过程"}},[a._v("🎋")]),a._v(" 自定义序列化过程")]),a._v(" "),s("p",[a._v("Java 中手动进行序列化使用的类库为 ObjectOutputStream 类，即调用 ObjectOutputStream 类的 writeObject(Object o) 方法进行序列化对象，调用 ObjectInputStream 类的 readObject() 方法来反序列化对象。也可以自定义序列化的过程替代默认的序列化，方法为：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("实现 Serializable 接口，并提供以下特殊方法，通过抛出 NotSerializableException 异常来终止序列化。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("readObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectInputStream")]),a._v(" stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("writeObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectOutputStream")]),a._v(" stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("readObjectNoData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectStreamException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("或者实现 Externalizable 接口，并实现以下方法：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("writeExternal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectOutput")]),a._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("readExternal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectInput")]),a._v(" in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])])]),a._v(" "),s("h2",{attrs:{id:"spring-mvc-中的序列化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-中的序列化"}},[a._v("🎋")]),a._v(" Spring MVC 中的序列化")]),a._v(" "),s("p",[a._v("Java Web 开发中我们的 Web 请求和响应经常使用的序列化格式为 JSON 格式。将对象序列化为 JSON 格式和将 JSON 反序列化为对象的过程由 Spring MVC 指定序列化器，可以通过这篇文章 "),s("a",{attrs:{href:"./jackson-serialization"}},[a._v("DEBUG - Jackson 反序列化驼峰问题")]),a._v(" 管中窥豹。")]),a._v(" "),s("p",[a._v("JSON 序列化的第三方类库有 Jackson，Gson，fastjson 等，下面简单讲一下使用。")]),a._v(" "),s("h3",{attrs:{id:"jackson"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jackson"}},[a._v("🎋")]),a._v(" Jackson")]),a._v(" "),s("p",[a._v("1、导包")]),a._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-boot-starter-json"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("2、实体类注解")]),a._v(" "),s("p",[a._v("3、序列化")]),a._v(" "),s("h3",{attrs:{id:"gson"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gson"}},[a._v("🎋")]),a._v(" Gson")]),a._v(" "),s("p",[a._v("1、导包")]),a._v(" "),s("p",[a._v("2、实体类注解")]),a._v(" "),s("p",[a._v("3、序列化")]),a._v(" "),s("h3",{attrs:{id:"fastjson"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fastjson"}},[a._v("🎋")]),a._v(" fastjson")]),a._v(" "),s("p",[a._v("1、导包")]),a._v(" "),s("p",[a._v("2、实体类注解")]),a._v(" "),s("p",[a._v("3、序列化")]),a._v(" "),s("hr"),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("参考文献")]),a._v(" "),s("p",[a._v("美团技术团队 "),s("a",{attrs:{href:"https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("序列化和反序列化"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);