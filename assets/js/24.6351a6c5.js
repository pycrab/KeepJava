(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{377:function(e,a,t){"use strict";t.r(a);var s=t(25),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"异步任务及其状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步任务及其状态"}},[e._v("🎋")]),e._v(" 异步任务及其状态")]),e._v(" "),t("h3",{attrs:{id:"任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任务"}},[e._v("🎋")]),e._v(" 任务")]),e._v(" "),t("p",[e._v("在线程基础那一节我们简单了解到，实现 Runnable 接口可以创建一个任务，然后交给线程去执行。我们先看一下 Runnable 接口：")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/** \n * @author  Arthur van Hoff\n * @see     java.lang.Thread\n * @see     java.util.concurrent.Callable\n * @since   1.0\n */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@FunctionalInterface")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Runnable")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * When an object implementing interface {@code Runnable} is used\n     * to create a thread, starting the thread causes the object's\n     * {@code run} method to be called in that separately executing\n     * thread.\n     * <p>\n     * The general contract of the method {@code run} is that it may\n     * take any action whatsoever.\n     *\n     * @see     java.lang.Thread#run()\n     */")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("abstract")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br")])]),t("p",[e._v("Runnable 接口中只提供了没有返回值的 "),t("code",[e._v("run()")]),e._v(" 方法，并且不能抛出异常，如果我们需要等任务结束，根据任务的结果或者异常状态进行下一步操作，该接口没法做到。这就有了 Callable 接口，我们看一下 Callable 接口：")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * @see Executor\n * @since 1.5\n * @author Doug Lea\n * @param <V> the result type of method {@code call}\n */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@FunctionalInterface")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Callable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Computes a result, or throws an exception if unable to do so.\n     *\n     * @return computed result\n     * @throws Exception if unable to compute a result\n     */")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("V")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Exception")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])]),t("p",[e._v("Callable 接口提供了 "),t("code",[e._v("call()")]),e._v(" 方法，该方法有返回值，并且可以抛出异常。")]),e._v(" "),t("h3",{attrs:{id:"状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态"}},[e._v("🎋")]),e._v(" 状态")]),e._v(" "),t("p",[e._v("JDK 5 提供了 "),t("strong",[e._v("Future 接口")]),e._v("对线程状态进行管理。Future 表示异步任务的执行情况，通过它可以对任务进行控制，它提供了以下方法：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("get()")]),e._v("，阻塞获取异步任务执行结果，可能会抛出异常。")]),e._v(" "),t("li",[t("code",[e._v("get(long timeout, TimeUnit unit)")]),e._v("，阻塞一定时间获取异步任务执行结果，超时未果会抛异常 TimeoutException。")]),e._v(" "),t("li",[t("code",[e._v("cancel(boolean mayInterruptIfRunning)")]),e._v("，如果任务没开始，则直接取消；如果已经开始，则通过 mayInterruptIfRunning 参数指定是否应该中断。如果任务已经执行完、任务已经被取消、或者由于其它原因不能取消则返回 false。")]),e._v(" "),t("li",[t("code",[e._v("isCancelled()")]),e._v(" ，返回任务是否被取消。")]),e._v(" "),t("li",[t("code",[e._v("isDone()")]),e._v("，返回任务是否已完成、已取消、抛异常。")])]),e._v(" "),t("h3",{attrs:{id:"runnablefuture-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runnablefuture-接口"}},[e._v("🎋")]),e._v(" RunnableFuture 接口")]),e._v(" "),t("p",[e._v("RunnableFuture 接口继承了 Runnable 接口和 Future 接口，它提供一个 "),t("code",[e._v("run()")]),e._v(" 方法将任务和任务的运行状态联系起来。这样就可以"),t("strong",[e._v("将 RunnableFuture 任务对象提交给线程，同时我们又可以对提交的任务进行控制")]),e._v("（通过后面的线程执行器具体控制）。这就看出来面向接口编程的重要性了。")]),e._v(" "),t("p",[e._v("FutureTask 类是 RunnableFuture 接口的实现类，是任务的默认实现，提供了很好的自定义任务的参考价值。")]),e._v(" "),t("h2",{attrs:{id:"线程执行器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程执行器"}},[e._v("🎋")]),e._v(" 线程执行器")]),e._v(" "),t("p",[e._v("一直以来我们都是直接创建一个线程并运行，线程执行的任务和线程是高度耦合的。JDK 5 提供了线程执行器来管理任务，包括添加任务、启动、停止等。")]),e._v(" "),t("h3",{attrs:{id:"executor-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executor-接口"}},[e._v("🎋")]),e._v(" Executor 接口")]),e._v(" "),t("p",[e._v("Executor 接口提供了一个 "),t("code",[e._v("execute(Runnable command)")]),e._v(" 方法，基于此我们可以自己定义如何添加和执行任务，比如：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("添加并直接在调用者线程中执行任务")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Manager")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("implements")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Executor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Override")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Runnable")]),e._v(" command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// new Manager().execute(()->{});")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("添加并启动新线程异步执行任务")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 指定有意义的线程及线程组，方便追溯")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Manager")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("implements")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Executor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AtomicInteger")]),e._v(" threadNum "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AtomicInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" busMark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Manager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" busMark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("busMark "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"From Class Manager\'s "')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" busMark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Override")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Runnable")]),e._v(" command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" busMark "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" threadNum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("incrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// new Manager("xx-1").execute(()->{});')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])])])]),e._v(" "),t("h3",{attrs:{id:"executorservice-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executorservice-接口"}},[e._v("🎋")]),e._v(" ExecutorService 接口")]),e._v(" "),t("p",[e._v("ExecutorService 接口继承自 Executor 接口，它提供了终止线程执行器的方法，并通过返回 Future 跟踪异步任务执行状态：")]),e._v(" "),t("ul",[t("li",[e._v("终止\n"),t("ul",[t("li",[t("code",[e._v("shutdown()")]),e._v("，拒绝提交的新任务，等待已提交的任务执行完再关闭")]),e._v(" "),t("li",[t("code",[e._v("shutdownNow()")]),e._v("，尝试停止正在执行的任务，暂停并返回等待执行的任务列表")]),e._v(" "),t("li",[t("code",[e._v("awaitTermination(long timeout, TimeUnit unit)")]),e._v("，执行关闭之后再执行此方法，该方法会阻塞直到全部线程执行完毕或者发生超时或者当前线程被中断")]),e._v(" "),t("li",[t("code",[e._v("isShutdown()")]),e._v("，判断是否已关闭")]),e._v(" "),t("li",[t("code",[e._v("isTerminated()")]),e._v("，判断关闭后所有线程是否正常结束")])])]),e._v(" "),t("li",[e._v("启动异步任务，成功执行会返回 Future 的 "),t("code",[e._v("get()")]),e._v(" 结果\n"),t("ul",[t("li",[t("code",[e._v("submit(Callable<T> task)")]),e._v("，提交实现 Callable 接口的异步任务")]),e._v(" "),t("li",[t("code",[e._v("submit(Runnable task, T result)")]),e._v("，提交实现 Runnable 接口的异步任务")])])]),e._v(" "),t("li",[e._v("批量提交异步任务")]),e._v(" "),t("li",[t("code",[e._v("invokeAll(Collection<? extends Callable<T>> tasks)")]),e._v("，在全部完成后返回各自的结果和状态")]),e._v(" "),t("li",[t("code",[e._v("invokeAny(Collection<? extends Callable<T>> tasks)")]),e._v("，返回一个成功执行的任务的结果或者抛出异常，其它任务都会取消")])]),e._v(" "),t("h3",{attrs:{id:"scheduledexecutorservice-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduledexecutorservice-接口"}},[e._v("🎋")]),e._v(" ScheduledExecutorService 接口")]),e._v(" "),t("p",[e._v("ScheduledExecutorService 接口继承自 ExecutorService 接口，它提供了延迟指定时间或者周期性执行异步任务的方法，并通过返回 Future 跟踪异步任务执行状态：")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("schedule(Runnable command, long delay, TimeUnit unit);")]),e._v("，提交支持 Runnable 接口的任务，延迟执行")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("schedule(Callable<V> callable, long delay, TimeUnit unit);")]),e._v("，提交支持 Callable 接口的任务，延迟执行")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit);")]),e._v("，提交任务，在 initialDelay 延迟后以 period 固定频率执行")]),e._v(" "),t("p",[e._v("第一次执行在 initialDelay 延迟后，然后以 initialDelay + period * n 的频率执行；如果任务执行时间超过频率，可能会延迟启动，不会同时执行。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);")]),e._v("，提交任务，在 initialDelay 延迟后执行一次，当每次任务执行结束推迟 delay 时间后再执行下一次任务")])])]),e._v(" "),t("blockquote",[t("p",[e._v("周期性任务会由于任务被取消、执行器停止或者任务抛出异常而终止，可以通过返回值 Future 来处理。")]),e._v(" "),t("p",[e._v("默认的 submit 提交任务的方法为 0 延迟，以上方法都支持 0 延迟和负延迟，表示的意思是立马执行。")]),e._v(" "),t("p",[e._v("时间单位都是相对时间，可能需要在绝对时间和相对时间转换，比如 "),t("code",[e._v("date.getTime() - System.currentTimeMillis()")])])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("代码示例：每隔十秒执行一次，一小时后停止任务执行")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ScheduledExecutorService")]),e._v(" scheduledThreadPool "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("newScheduledThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ScheduledFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" future "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" scheduledThreadPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("scheduleAtFixedRate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ok"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("SECONDS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nscheduledThreadPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("schedule")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" future"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cancel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("HOURS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])])]),e._v(" "),t("h2",{attrs:{id:"线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[e._v("🎋")]),e._v(" 线程池")]),e._v(" "),t("p",[e._v("线程池是线程执行器的直接实现。频繁创建和销毁线程会消耗大量内存管理资源，如果我们一开始就初始化好指定数量的线程，当线程运行时以某种方式停止并切换任务，就相当于开辟了一个新的线程。这样就减少了任务切换带来的开销。")]),e._v(" "),t("p",[e._v("线程池内部维护了一个队列，当提交的任务数多于线程池的线程数时，会在内部队列里面等待执行，这是一种"),t("strong",[e._v("服务降级")]),e._v("的实现。")]),e._v(" "),t("h3",{attrs:{id:"threadpoolexecutor-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor-类"}},[e._v("🎋")]),e._v(" ThreadPoolExecutor 类")]),e._v(" "),t("p",[e._v("我们使用 ThreadPoolExecutor 类来创建线程池。ThreadPoolExecutor 类继承自 AbstractExecutorService 抽象类（其实现了 ExecutorService 接口并提供了默认实现），并提供了丰富的重载构造器 "),t("code",[e._v("ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)")]),e._v("，参数说明如下：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("核心线程数 corePoolSize 和最大线程数 maximumPoolSize")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("按需创建线程")]),e._v(" "),t("p",[e._v("默认只有当新任务到来时才会创建并启动核心线程。但是也提供了两个方法来提前创建：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("prestartCoreThread()")]),e._v("，启动一个核心线程，如果核心线程全部启动则返回 false")]),e._v(" "),t("li",[t("code",[e._v("prestartAllCoreThreads()")]),e._v("，启动所有的核心线程并返回本次启动的线程数")])]),e._v(" "),t("p",[e._v("如果构造线程池的阻塞队列本来就有任务，则需要预先创建并启动线程。")])])]),e._v(" "),t("li",[t("p",[e._v("线程最大活跃时间 keepAliveTime 及其时间单位 TimeUnit")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("最大活跃时间")]),e._v(" "),t("p",[e._v("当线程数超过核心线程数时，会终止超过最大活跃时间的空闲线程，减少资源消耗。")]),e._v(" "),t("p",[e._v("如果开启了 "),t("code",[e._v("allowCoreThreadTimeOut(boolean value)")]),e._v(" 允许核心线程超时，则空闲的核心线程也会被终止。")]),e._v(" "),t("p",[e._v("设置为 (Long.MAX_VALUE, TimeUnit.NANOSECONDS)  则永远不会关闭。")])])]),e._v(" "),t("li",[t("p",[e._v("保存任务的阻塞队列 workQueue，不能为 null")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("排队策略")]),e._v(" "),t("p",[e._v("当 execute 提交一个新的任务时，")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("如果正在运行的线程数少于核心线程数 corePoolSize，则创建新的线程处理新任务，即使其它工作线程处于空闲状态；")])]),e._v(" "),t("li",[t("p",[e._v("如果正在运行的线程数大于等于核心线程数 corePoolSize，先加入队列 workQueue，尽管此时线程数还小于 maximumPoolSize；")])]),e._v(" "),t("li",[t("p",[e._v("当队列 workQueue 满，并且线程数小于 maximumPoolSize，则创建新的线程处理新任务；")])]),e._v(" "),t("li",[t("p",[e._v("当队列 workQueue 满，并且线程数也已经到最大 maximumPoolSize，则触发拒绝策略 RejectedExecutionHandler。")])])])])]),e._v(" "),t("li",[t("p",[e._v("创建新线程使用的线程工厂 threadFactory")])]),e._v(" "),t("li",[t("p",[e._v("当线程数和队列最大容量都到达时，对新任务的拒绝策略 handler")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("拒绝策略")]),e._v(" "),t("p",[e._v("当使用有界队列和有限的最大池线程数时或者执行器关闭时，新来的任务将被拒绝，预定义了四种拒绝策略：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ThreadPoolExecutor.AbortPolicy")]),e._v("，默认拒绝，抛出 RejectedExecutionException 异常")]),e._v(" "),t("li",[t("code",[e._v("ThreadPoolExecutor.DiscardPolicy")]),e._v("，直接丢弃")]),e._v(" "),t("li",[t("code",[e._v("ThreadPoolExecutor.CallerRunsPolicy")]),e._v("，调用者执行策略，反馈控制降低任务提交速度")]),e._v(" "),t("li",[t("code",[e._v("ThreadPoolExecutor.DiscardOldestPolicy")]),e._v("，丢弃队列开头的任务，并再次尝试")])])])])]),e._v(" "),t("p",[e._v("以上参数除了队列 workQueue 都可以通过 set 方法重新设置。")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("回收内存")]),e._v(" "),t("p",[e._v("可以通过 "),t("code",[e._v("purge()")]),e._v(" 方法尝试删除队列中已取消的任务，回收存储空间；"),t("code",[e._v("remove(Runnable task)")]),e._v(" 方法可以删除队列中的指定任务，返回是否删除。")]),e._v(" "),t("p",[e._v("线程池内的线程不再使用需要回收，如果没有明确关闭线程池，可以通过设置 keepAliveTime 活跃时间、设置零核心线程 corePoolSize 或者  "),t("code",[e._v("allowCoreThreadTimeOut(true)")]),e._v(" 来回收线程。")])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),t("p",[e._v("使用 ArrayBlockingQueue 等设置有界队列，需要配合 maximumPoolSize 最大池大小，考虑 IO、上下文切换等进行调整；")]),e._v(" "),t("p",[e._v("使用不配置容量的 LinkedBlockingQueue 无界阻塞队列，超过核心线程数时任务就会入队，maximumPoolSize 参数就失效了，如果处理速度小于添加新任务的速度，可能会使线程数无限增长；")]),e._v(" "),t("p",[e._v("使用 SynchronousQueue 阻塞队列，可以直接创建线程切换，通常 maximumPoolSize 设置为无界，如果处理速度小于添加新任务的速度，可能会使线程数无限增长。")])]),e._v(" "),t("h3",{attrs:{id:"scheduledthreadpoolexecutor-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor-类"}},[e._v("🎋")]),e._v(" ScheduledThreadPoolExecutor 类")]),e._v(" "),t("p",[e._v("ScheduledThreadPoolExecutor 类继承自 ThreadPoolExecutor 类，并实现了 ScheduledExecutorService 接口，它扩展了普通的线程池，支持添加可以延时执行或者周期性执行的任务。")]),e._v(" "),t("p",[e._v("从它提供的构造器 "),t("code",[e._v("ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)")]),e._v(" 可知，内部使用的是相当于无界的 Integer.MAX_VALUE 大小的最大池大小，使用  DelayedWorkQueue 延迟阻塞队列，该队列使用堆这种数据结构，根据延迟时间排序，更快查找。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("setRemoveOnCancelPolicy(boolean value)")]),e._v("，设置已取消的任务是否自动从队列中删除，默认 false")])]),e._v(" "),t("h3",{attrs:{id:"executors-线程池工厂"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executors-线程池工厂"}},[e._v("🎋")]),e._v(" Executors 线程池工厂")]),e._v(" "),t("p",[e._v("Executors 类是线程池工厂，它预置了几种常用的线程池和 Callable 转换方法。")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("newFixedThreadPool(int nThreads)")]),e._v("，创建一个固定 nThreads 个线程的、无界队列的线程池，实现为 "),t("code",[e._v("ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());")])]),e._v(" "),t("p",[e._v("当一个线程执行完毕或者异常终止，则会有一个新的线程执行新的任务。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("newSingleThreadExecutor()")]),e._v("，创建一个单一线程的、无界队列的线程池，实现为 "),t("code",[e._v("new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>()));")])]),e._v(" "),t("p",[e._v("当一个线程执行完毕或者异常终止，会创建一个新的线程执行新的任务，所以该线程池在任何时间最多只有一个活跃线程，确保任务按顺序执行。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("newCachedThreadPool()")]),e._v("，创建一个短期快速执行的、基于同步阻塞队列的线程池，实现为 "),t("code",[e._v("new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());")])]),e._v(" "),t("p",[e._v("它使用同步阻塞队列，根据需要创建线程，但是会复用已有的可用线程，60 秒未使用的线程将终止并从缓存中删除（自动回收）。")]),e._v(" "),t("p",[e._v("主要用于提高短期异步任务的性能，由于使用最大限制的 Integer.MAX_VALUE 最大线程数不安全，因此通常需要自己实现。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("newScheduledThreadPool(int corePoolSize)")]),e._v("，创建一个可以延时或周期性执行任务的线程池，实现为 "),t("code",[e._v("new ScheduledThreadPoolExecutor(corePoolSize);")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("newSingleThreadScheduledExecutor()")]),e._v("，创建一个单一线程的、可延时或周期性执行任务的线程池，实现为 "),t("code",[e._v("new DelegatedScheduledExecutorService (new ScheduledThreadPoolExecutor(1));")])]),e._v(" "),t("p",[e._v("同 "),t("code",[e._v("newSingleThreadExecutor()")]),e._v("。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("newWorkStealingPool()")]),e._v(" "),t("badge",[e._v("JDK 8")]),e._v("，创建一个线程数可动态伸缩的、用于并行计算的线程池，实现为 "),t("code",[e._v("new ForkJoinPool (Runtime.getRuntime().availableProcessors(), ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);")])],1),e._v(" "),t("p",[e._v("它根据指定的并行级别 parallelism 维护足够的线程并可能使用多个队列来减少争用，不保证线程执行顺序；不指定参数则默认使用 Java 虚拟机运行时可用的处理机数量，不小于 1。")])])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("newSingleThreadExecutor() 和 newFixedThreadPool(1) 的区别")]),e._v(" "),t("p",[t("code",[e._v("newSingleThreadExecutor()")]),e._v(" 后期不可重新配置线程池属性，因为它使用包装类 DelegatedExecutorService 包装，该类只实现了 ExecutorService 接口；而 "),t("code",[e._v("newFixedThreadPool(1)")]),e._v(" 直接由 ThreadPoolExecutor 类实现，可以重新配置线程数。")]),e._v(" "),t("p",[t("code",[e._v("newSingleThreadExecutor()")]),e._v(" 使用的包装类 FinalizableDelegatedExecutorService（继承自 DelegatedExecutorService） 重写了 "),t("code",[e._v("finalize()")]),e._v(" 方法，在 GC 时会执行 "),t("code",[e._v("shutdown()")]),e._v(" 方法关闭不再被引用且没有线程的线程池；"),t("code",[e._v("newFixedThreadPool(1)")]),e._v(" 使用的 ThreadPoolExecutor 类在 JDK 11 之前重写了 "),t("code",[e._v("finalize()")]),e._v(" 方法，为了与字类兼容在 JDK 11 之后去掉了方法体。")]),e._v(" "),t("p",[t("code",[e._v("newSingleThreadScheduledExecutor()")]),e._v(" 也是使用了包装类 DelegatedScheduledExecutorService 进行包装，该类实现了 ScheduledExecutorService 接口，后期不可重新配置线程池属性。")])]),e._v(" "),t("p",[e._v("前面已经看到使用 DelegatedExecutorService 这个包装器类可以冻结配置，禁止修改线程池具体实现，Executors 工厂也提供了两个方法对自定义的线程池冻结配置：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("unconfigurableExecutorService(ExecutorService executor)")])]),e._v(" "),t("li",[t("code",[e._v("unconfigurableScheduledExecutorService(ScheduledExecutorService executor)")])])]),e._v(" "),t("p",[e._v("Executors 类还提供了几个方法转换：")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("callable(Runnable task, T result)")]),e._v("，Runnable 接口转 Callable 接口")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("callable(final PrivilegedAction<?> action)")]),e._v("，将特权动作转为 Callable")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("privilegedCallable(Callable<T> callable)")]),e._v("，将 Callable 包装为特权动作")]),e._v(" "),t("p",[e._v("提示：由 AccessController 类进行特权处理。")])])]),e._v(" "),t("h3",{attrs:{id:"自定义线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义线程池"}},[e._v("🎋")]),e._v(" 自定义线程池")]),e._v(" "),t("p",[e._v("通过继承 ThreadPoolExecutor 类可以重写部分 protected 方法，对线程池进行扩展。")]),e._v(" "),t("hr"),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("阿里巴巴 Java 开发手册（嵩山版）")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。")])]),e._v(" "),t("li",[t("p",[e._v("【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。")]),e._v(" "),t("p",[e._v("说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。 如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。")])]),e._v(" "),t("li",[t("p",[e._v("【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这 样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。")]),e._v(" "),t("p",[e._v("说明：Executors 返回的线程池对象的弊端如下：")]),e._v(" "),t("p",[e._v("1） FixedThreadPool 和 SingleThreadPool： 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。")]),e._v(" "),t("p",[e._v("2） CachedThreadPool： 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。")])])])]),e._v(" "),t("h2",{attrs:{id:"并行计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行计算"}},[e._v("🎋")]),e._v(" 并行计算")]),e._v(" "),t("h3",{attrs:{id:"forkjoinpool-类-jdk-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-类-jdk-7"}},[e._v("🎋")]),e._v(" ForkJoinPool 类 "),t("badge",[e._v("JDK 7")])],1),e._v(" "),t("p",[e._v("ForkJoinPool 类继承自 AbstractExecutorService 抽象类，与其它线程执行器不同，它采用 work-stealing 工作窃取算法：池中的所有线程尝试查找并执行提交给池和/或由其他活动任务创建的任务。它可以通过对任务进行拆分并分治，达到高效处理。")]),e._v(" "),t("p",[e._v("ForkJoinTask 抽象类提供了任务拆分的默认方法，需要我们实现该抽象类提供具体的任务拆分方法。")]),e._v(" "),t("h2",{attrs:{id:"异步回调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步回调"}},[e._v("🎋")]),e._v(" 异步回调")]),e._v(" "),t("h3",{attrs:{id:"completablefuture-类-jdk-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture-类-jdk-8"}},[e._v("🎋")]),e._v(" CompletableFuture 类 "),t("badge",[e._v("JDK 8")])],1),e._v(" "),t("p",[e._v("JDK 8 新增了 CompletableFuture 类用于异步计算回调，并且支持任务按预期顺序编排执行。")]),e._v(" "),t("p",[e._v("由于 Future 接口需要阻塞获取结果，CompletableFuture 类实现了 Future 接口，并结合 JDK 8 的 Supplier、Consumer、Function 三个接口实现了任务编排。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("thenAccept()")]),e._v(" 回调方法返回执行结果")]),e._v(" "),t("li",[t("code",[e._v("exceptionally()")]),e._v(" 回调方法返回异常结果")]),e._v(" "),t("li",[t("code",[e._v("thenApply()")]),e._v(" 方法串行执行")]),e._v(" "),t("li",[t("code",[e._v("allOf()")]),e._v(" 方法并行执行所有")]),e._v(" "),t("li",[t("code",[e._v("anyOf()")]),e._v(" 方法并行执行返回一个")])])])}),[],!1,null,null,null);a.default=n.exports}}]);