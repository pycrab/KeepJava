(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{378:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("Java 中每个线程对象都是 Thread 类的实例")]),t._v("。下面通过阅读 java.lang.Thread 类的源码来学习下线程基础。源码注释写的非常清楚，不得不感谢开发人员的严谨认真。")]),t._v(" "),s("h2",{attrs:{id:"线程属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程属性"}},[t._v("🎋")]),t._v(" 线程属性")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("name 线程名称（volatile）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("setName(String)")]),t._v("，建议设置线程名，设置线程名时，不能为 null，否则会报 NPE 异常。匿名线程会根据创建顺序默认名称为 "),s("code",[t._v("Thread-顺序号")]),t._v(" 。")]),t._v(" "),s("li",[s("code",[t._v("getName()")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("id 线程 id（final）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getId()")]),t._v("，创建线程时分配的 id 不可修改，线程终止时可再分配给其他线程。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("priority 线程优先级")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("setPriority(int)")])]),t._v(" "),s("li",[s("code",[t._v("getPriority()")]),t._v("，线程优先级 1-10，默认是 5。创建线程默认继承当前线程的优先级；线程优先级决定线程调度器优先调度哪个线程执行的概率，但是不同的 OS 线程规划不一样，有的甚至会忽略该设置；设置优先级有可能会导致有的线程一直无法执行，从而导致饥饿。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("threadStatus 线程状态（volatile）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getState()")]),t._v(" 方法返回当前线程的状态，用来监视系统状态。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("interrupted 是否中断（volatile）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("isInterrupted()")]),t._v(" 方法测试线程是否已被中断，该方法并不影响线程中断状态。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("daemon 是否是守护线程")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("setDaemon(boolean)")]),t._v("，设置守护线程要在线程启动之前，否则线程存活会抛异常 IllegalThreadStateException。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("isDaemon()")]),t._v("，线程分为用户线程和守护线程，用户线程为主线程，守护线程为用户线程提供服务。JVM 启动时会启动一个 main 线程，main 线程又可以启动其它线程，如 gc 等守护线程；当只剩下守护线程时，JVM 会退出，此时守护线程不一定正常结束，所以守护线程不要持有资源，否则无法关闭。"),s("strong",[t._v("创建线程默认会继承当前线程是守护线程还是用户线程")]),t._v("。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("group 线程组")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getThreadGroup()")]),t._v("，返回线程所属的线程组，如果线程死亡返回 null。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("defaultUncaughtExceptionHandler 默认异常处理器（static volatile）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getDefaultUncaughtExceptionHandler()")])]),t._v(" "),s("li",[s("code",[t._v("setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler eh)")]),t._v("，如果线程和线程组都没有设置异常处理器，则调用默认的处理器（不设置默认 null）。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("uncaughtExceptionHandler 异常处理器（volatile）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getUncaughtExceptionHandler()")])]),t._v(" "),s("li",[s("code",[t._v("setUncaughtExceptionHandler(UncaughtExceptionHandler eh)")]),t._v("，由于线程 "),s("code",[t._v("run()")]),t._v(" 方法不会抛出异常，当出现异常时，首先会由线程设置的 uncaughtExceptionHandler 处理器来处理（未设置默认 null），如果没有则由线程组来处理，还没有则由线程默认处理器处理。")])])])]),t._v(" "),s("h2",{attrs:{id:"线程状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程状态"}},[t._v("🎋")]),t._v(" 线程状态")]),t._v(" "),s("p",[t._v("Thread 类中的内部枚举类 State 定义了五种线程状态：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("NEW")]),t._v("，线程已创建但未启动执行，默认此时 threadStatus 为 0")]),t._v(" "),s("li",[s("code",[t._v("RUNNABLE")]),t._v("，JVM 正在执行线程的 "),s("code",[t._v("run()")]),t._v(" 方法，但是线程有可能在等待操作系统资源")]),t._v(" "),s("li",[s("code",[t._v("BLOCKED")]),t._v("，线程被阻塞，正在等待其它线程执行")]),t._v(" "),s("li",[s("code",[t._v("WAITING")]),t._v("，线程执行中由于以下三种情况等待被其他线程唤醒或者其他线程结束：\n"),s("ul",[s("li",[t._v("Object.wait()")]),t._v(" "),s("li",[t._v("Thread.join()")]),t._v(" "),s("li",[t._v("LockSupport.park()")])])]),t._v(" "),s("li",[s("code",[t._v("TIMED_WAITING")]),t._v("，具有指定时间的等待状态的线程，触发方式：\n"),s("ul",[s("li",[t._v("Thread.sleep(long)")]),t._v(" "),s("li",[t._v("Object.wait(long)")]),t._v(" "),s("li",[t._v("Thread.join(long)")]),t._v(" "),s("li",[t._v("LockSupport.parkNanos()")]),t._v(" "),s("li",[t._v("LockSupport.parkUntil()")])])]),t._v(" "),s("li",[s("code",[t._v("TERMINATED")]),t._v("，线程执行完 "),s("code",[t._v("run()")]),t._v(" 方法正常终止或 "),s("code",[t._v("run()")]),t._v(" 方法抛出异常意外终止")])]),t._v(" "),s("p",[t._v("如果线程在 "),s("code",[t._v("TERMINATED")]),t._v(" 状态或者线程被中断，那么就说线程死亡了，否则线程还活着。可以通过 "),s("code",[t._v("isAlive()")]),t._v(" 方法判断。")]),t._v(" "),s("blockquote",[s("p",[t._v("TODO：操作系统中线程状态的切换")])]),t._v(" "),s("h2",{attrs:{id:"线程方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程方法"}},[t._v("🎋")]),t._v(" 线程方法")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("start()")]),t._v("，启动一个线程交由 JVM 执行，调用该方法后新创建的线程开始执行 run 方法，当前线程继续执行 "),s("code",[t._v("start()")]),t._v(" 方法后面的事情。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("join( )")]),t._v(" / "),s("code",[t._v("join(long millis)")]),t._v(" / "),s("code",[t._v("join(long millis, int nanos)")]),t._v("，暂停主线程优先执行该线程，直到该线程死亡（结束或者被中断）或时间到。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("interrupt()")]),t._v("，主线程将当前线程的中断标志置为 true。当前线程可以通过 "),s("code",[t._v("isInterrupted()")]),t._v(" 方法判断是否已中断并终止当前操作。")]),t._v(" "),s("p",[t._v("中断相当于一个信号，告知当前线程需要终止执行。如果当前线程正处于以下几种状态中，执行该方法当前线程会抛出中断异常 InterruptedException 并清除中断状态。以下方法需捕获中断异常进行处理：")]),t._v(" "),s("ul",[s("li",[t._v("Object.wait()")]),t._v(" "),s("li",[t._v("join()")]),t._v(" "),s("li",[t._v("sleep()")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("interrupted()")]),t._v(" 静态方法，返回当前线程是否已中断，如果中断则重置中断标志为 false 并返回 true。这个方法可以拒绝中断。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("sleep(long millis)")]),t._v(" / "),s("code",[t._v("sleep(long millis, int nanos)")]),t._v(" 静态方法，使当前线程暂停执行一段时间，这个时间不是精确的，受操作系统计时器和调度程序的精度和准确性影响，其它线程中断当前线程也会停止此时间。")]),t._v(" "),s("p",[t._v("线程暂停不会失去持有的锁。带纳秒参数的构造器其实内部调用的还是毫秒构造器，纳秒参数范围为 0 - 999999，当大于 500000 或者毫秒设置为 0，则毫秒加 1。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("yield()")]),t._v(" 静态方法，告诉调度程序可以让出当前使用的处理器，调度程序可以忽略该请求。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("currentThread()")]),t._v(" 静态方法，返回当前正在执行的线程对象的引用。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("holdsLock(Object o)")]),t._v(" 静态方法，当前线程是否持有该对象的监视器锁（隐式锁）。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("onSpinWait()")]),t._v("静态方法，JDK 9 引入，表示当前正在等待某个条件无法执行，调用线程将向运行时指示其正在等待。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("dumpStack()")]),t._v(" 静态方法，打印当前线程堆栈信息。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("activeCount()")]),t._v(" 静态方法，返回当前线程的线程组及其子线程组内的活动线程数量的估计值，用于监控和调试。")])])]),t._v(" "),s("h2",{attrs:{id:"线程创建和任务执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程创建和任务执行"}},[t._v("🎋")]),t._v(" 线程创建和任务执行")]),t._v(" "),s("p",[t._v("Thread 类提供了构造器和 "),s("code",[t._v("start()")]),t._v(" 方法来创建和启动线程。比如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nthread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("运行一下，没感觉到有什么变化，因为我们创建了一个空线程嘛，什么也没让它做。那如何让线程按我们的指示去做呢？")]),t._v(" "),s("p",[s("strong",[t._v("线程启动后，JVM 会去调用线程的 "),s("code",[t._v("run()")]),t._v(" 方法去执行")]),t._v("。首先我们看一下Thread 类的 "),s("code",[t._v("run()")]),t._v("方法：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* What will be run. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("可以看到，thread 类的 "),s("code",[t._v("run()")]),t._v(" 方法实际上是执行的 target 的 "),s("code",[t._v("run()")]),t._v(" 方法，而 target 是 Runnable 接口的对象，也就是说，我们要创建一个任务，然后交给线程去执行，这个任务呢，要实现 Runnable 接口。")]),t._v(" "),s("p",[t._v("那这个任务怎么交给线程呢？Thread 类提供了构造器 "),s("code",[t._v("Thread(ThreadGroup, Runnable, String)")]),t._v(" 来接收这个对象。")]),t._v(" "),s("blockquote",[s("p",[t._v("所以我们需要创建一个类实现 Runnable 接口，给 "),s("code",[t._v("run()")]),t._v(" 方法指定一个行为，然后作为构造器参数交给线程执行就好了。")])]),t._v(" "),s("p",[t._v("Thread 类也实现了 Runnable 接口，但是 Thread 类没有具体行为，我们通过继承 Thread 类重写 "),s("code",[t._v("run()")]),t._v(" 方法不就有行为了嘛。")]),t._v(" "),s("blockquote",[s("p",[t._v("所以我们还可以继承 Thread 类并重写 "),s("code",[t._v("run()")]),t._v(" 方法，然后作为构造器参数交给线程执行就可以了。")])]),t._v(" "),s("p",[t._v("以上两种方式都是如何创建任务，其中，继承 Thread 类就不能继承其他类了，而实现接口比较灵活，且 Java 8 lambada 表达式语法可以将接口作为方法引用或者构造器参数，使得 "),s("code",[t._v("run()")]),t._v(" 方法可以很方便的被实现：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数为 Runnable 实现类的构造器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"执行run方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nthread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("特别注意")]),t._v(" "),s("p",[t._v("使用构造器创建线程默认继承当前线程的两个属性：是否是守护线程以及线程优先级。如果没有指定线程组，则继承父线程的线程组。")]),t._v(" "),s("p",[t._v("JDK 8 及以前会默认继承线程局部变量，JDK 9 默认不继承，而是新增了一个构造器，让用户决定是否开启继承。")])]),t._v(" "),s("h3",{attrs:{id:"线程工厂创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程工厂创建"}},[t._v("🎋")]),t._v(" 线程工厂创建")]),t._v(" "),s("p",[t._v("JDK 5 提供了 ThreadFactory 接口作为线程工厂，提供了 "),s("code",[t._v("newThread(Runnable r)")]),t._v(" 方法来创建线程。通过线程工厂，我们可以统一定义线程组，初始化线程优先级，自定义线程名称、初始化线程守护状态等操作。")]),t._v(" "),s("p",[t._v("自定义线程工厂代码示例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProductThreadFactory")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadGroup")]),t._v(" threadGroup "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Product-flow"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" threadNum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" taskName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProductThreadFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" taskName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("taskName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"From Class ProductFactory‘s"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" taskName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("threadGroup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" taskName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" threadNum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndIncrement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPriority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDaemon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUncaughtExceptionHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// new ProductThreadFactory("").newThread(() -> {}).start();')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("阿里巴巴 Java 开发手册（嵩山版）")]),t._v(" "),s("p",[t._v("【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。")]),t._v(" "),s("p",[t._v("自定义线程工厂，并且根据外部特征进行分组。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);