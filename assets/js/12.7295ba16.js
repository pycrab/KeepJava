(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{365:function(a,t,r){"use strict";r.r(t);var s=r(25),_=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"面向对象基础设计原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象基础设计原则"}},[a._v("🎋")]),a._v(" "),r("strong",[a._v("面向对象基础设计原则")])]),a._v(" "),r("ol",[r("li",[a._v("抽象")]),a._v(" "),r("li",[a._v("封装")]),a._v(" "),r("li",[a._v("继承")]),a._v(" "),r("li",[a._v("多态")]),a._v(" "),r("li",[a._v("组合")])]),a._v(" "),r("h2",{attrs:{id:"典型的设计原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#典型的设计原则"}},[a._v("🎋")]),a._v(" "),r("strong",[a._v("典型的设计原则")])]),a._v(" "),r("ol",[r("li",[a._v("Liskov 替换原则（LSP）\n"),r("ul",[r("li",[a._v("即子类型必须能够替换他们的基类型，或者说子类型不能添加任何基类型没有的附加约束。")]),a._v(" "),r("li",[a._v("针对接口编程思想：实现继承破坏了基类的实现，接口继承并不定义对象之间的内部关系，耦合度更低，扩展性更好")])])]),a._v(" "),r("li",[a._v("开放-封闭原则（OCP）\n"),r("ul",[r("li",[a._v("即对修改封闭，对扩展开放")]),a._v(" "),r("li",[a._v("基本思想就是封装变化的行为作为抽象类或接口")]),a._v(" "),r("li",[a._v("策略模式和模板方法模式提供了实现")])])]),a._v(" "),r("li",[a._v("单一职责原则（SRP）\n"),r("ul",[r("li",[a._v("即一个类应当只有一个职责")]),a._v(" "),r("li",[a._v("建立高内聚的类，分离出不相关的功能")])])]),a._v(" "),r("li",[a._v("接口隔离原则（ISP）\n"),r("ul",[r("li",[a._v("即接口的单一职责性")]),a._v(" "),r("li",[a._v("定制服务，为不同的角色提供不同的接口，防止接口污染")])])]),a._v(" "),r("li",[a._v("依赖倒置原则（DIP）\n"),r("ul",[r("li",[a._v("即高层模块不应依赖于低层模块，两者都应该依赖于抽象")]),a._v(" "),r("li",[a._v("面向接口编程，让高层与低层都依赖接口（抽象）")]),a._v(" "),r("li",[a._v("其他表述\n"),r("ul",[r("li",[a._v("好莱坞原则：呆着别动，到时我会找你")]),a._v(" "),r("li",[a._v("控制反转（IoC）或依赖注入")])])]),a._v(" "),r("li",[a._v("比如利用抽象工厂模式解除两个类之间的依赖关系；利用 Spring 框架通过 XML 配置文件建立接口和具体类之间的关系")])])]),a._v(" "),r("li",[a._v("迪米特准则（LOD）\n"),r("ul",[r("li",[a._v("即一个类对于所依赖的类知道的越少越好")]),a._v(" "),r("li",[a._v("这是一个实用的职责分配模式，他指出应该与直接朋友通信，将系统的耦合度保持最低")]),a._v(" "),r("li",[a._v("被依赖的类对外公开的方法要少，要建立中间人委托机制，进而面向接口编程")])])])]),a._v(" "),r("h2",{attrs:{id:"良好的-oo-设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#良好的-oo-设计"}},[a._v("🎋")]),a._v(" "),r("strong",[a._v("良好的 OO 设计")])]),a._v(" "),r("ol",[r("li",[a._v("可复用")]),a._v(" "),r("li",[a._v("可扩充")]),a._v(" "),r("li",[a._v("可维护")]),a._v(" "),r("li",[a._v("设计模式")])]),a._v(" "),r("h2",{attrs:{id:"_23种-gof-设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_23种-gof-设计模式"}},[a._v("🎋")]),a._v(" "),r("strong",[a._v("23种 GoF 设计模式")])]),a._v(" "),r("p",[a._v("设计模式分为类模式和对象模式，类模式处理类和派生类之间的继承关系，对象模式处理对象之间的组织关系。")]),a._v(" "),r("h3",{attrs:{id:"创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[a._v("🎋")]),a._v(" 创建型模式")]),a._v(" "),r("h4",{attrs:{id:"工厂方法模式-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式-类"}},[a._v("🎋")]),a._v(" 工厂方法模式（类）")]),a._v(" "),r("h4",{attrs:{id:"抽象工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[a._v("🎋")]),a._v(" 抽象工厂模式")]),a._v(" "),r("h4",{attrs:{id:"单例模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[a._v("🎋")]),a._v(" 单例模式")]),a._v(" "),r("h4",{attrs:{id:"原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[a._v("🎋")]),a._v(" 原型模式")]),a._v(" "),r("h4",{attrs:{id:"生成器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成器模式"}},[a._v("🎋")]),a._v(" 生成器模式")]),a._v(" "),r("h3",{attrs:{id:"结构型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[a._v("🎋")]),a._v(" 结构型模式")]),a._v(" "),r("h4",{attrs:{id:"适配器模式-类、对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式-类、对象"}},[a._v("🎋")]),a._v(" "),r("a",{attrs:{href:"./adapter-mode"}},[a._v("适配器模式")]),a._v("（类、对象）")]),a._v(" "),r("h4",{attrs:{id:"装饰者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式"}},[a._v("🎋")]),a._v(" "),r("a",{attrs:{href:"./decorator-mode"}},[a._v("装饰者模式")])]),a._v(" "),r("h4",{attrs:{id:"组合模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[a._v("🎋")]),a._v(" 组合模式")]),a._v(" "),r("h4",{attrs:{id:"外观模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[a._v("🎋")]),a._v(" 外观模式")]),a._v(" "),r("h4",{attrs:{id:"代理模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[a._v("🎋")]),a._v(" 代理模式")]),a._v(" "),r("h4",{attrs:{id:"享元模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[a._v("🎋")]),a._v(" 享元模式")]),a._v(" "),r("h4",{attrs:{id:"桥模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#桥模式"}},[a._v("🎋")]),a._v(" 桥模式")]),a._v(" "),r("h3",{attrs:{id:"行为型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[a._v("🎋")]),a._v(" 行为型模式")]),a._v(" "),r("h4",{attrs:{id:"模板方法模式-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式-类"}},[a._v("🎋")]),a._v(" 模板方法模式（类）")]),a._v(" "),r("h4",{attrs:{id:"解释器模式-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式-类"}},[a._v("🎋")]),a._v(" 解释器模式（类）")]),a._v(" "),r("h4",{attrs:{id:"策略模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[a._v("🎋")]),a._v(" 策略模式")]),a._v(" "),r("h4",{attrs:{id:"观察者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[a._v("🎋")]),a._v(" 观察者模式")]),a._v(" "),r("h4",{attrs:{id:"状态模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[a._v("🎋")]),a._v(" 状态模式")]),a._v(" "),r("h4",{attrs:{id:"命令模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[a._v("🎋")]),a._v(" 命令模式")]),a._v(" "),r("h4",{attrs:{id:"职责链模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式"}},[a._v("🎋")]),a._v(" 职责链模式")]),a._v(" "),r("h4",{attrs:{id:"迭代器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[a._v("🎋")]),a._v(" 迭代器模式")]),a._v(" "),r("h4",{attrs:{id:"中介者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[a._v("🎋")]),a._v(" 中介者模式")]),a._v(" "),r("h4",{attrs:{id:"备忘录模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式"}},[a._v("🎋")]),a._v(" 备忘录模式")]),a._v(" "),r("h4",{attrs:{id:"访问者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式"}},[a._v("🎋")]),a._v(" 访问者模式")])])}),[],!1,null,null,null);t.default=_.exports}}]);