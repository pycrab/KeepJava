(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{375:function(t,a,s){"use strict";s.r(a);var e=s(25),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"可共享的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可共享的类"}},[t._v("🎋")]),t._v(" 可共享的类")]),t._v(" "),s("p",[t._v("有些类是可以共享访问并且线程安全的，比如：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("无状态的类")]),t._v(" "),s("p",[t._v("如果一个类只提供方法，没有属性，那么它就是线程安全的。")])]),t._v(" "),s("li",[s("p",[t._v("不可变类")]),t._v(" "),s("p",[t._v("如果对象的属性是不可变的，并且不提供修改方法，那么它是安全的。如果要声明一个完全不可变的类，至少需要以下要素：")]),t._v(" "),s("ul",[s("li",[t._v("声明 final 类型的类，防止字类覆盖方法")]),t._v(" "),s("li",[t._v("声明私有的不可变属性，并且不提供 set 方法修改属性的值")]),t._v(" "),s("li",[t._v("对引用对象的属性，不提供修改方法，并且不暴露引用对象（可以通过提供引用对象的副本给外部访问）")]),t._v(" "),s("li",[t._v("甚至是声明私有构造器，从工厂创建实例")])]),t._v(" "),s("p",[t._v("众所周知，Enum 枚举类是线程安全的不可变类，JDK 9 新增的 VarHandles 类也是不可变的类。")])])]),t._v(" "),s("h2",{attrs:{id:"原子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子类"}},[t._v("🎋")]),t._v(" 原子类")]),t._v(" "),s("p",[t._v("原子操作是一次有效地同时发生的动作。原子操作不能停在中间：它要么完全发生，要么根本不发生。直到动作完成，原子动作的结果才可见。原子动作不能交替，所以不必担心线程干扰（但是不能避免内存一致性错误）。")]),t._v(" "),s("p",[t._v("JDK 5 新增了一些原子操作的封装类在 java.util.concurrent.atomic 包中，比如 AtomicInteger 类提供了 int 类型的原子操作：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getAndIncrement()")]),t._v(" 自增 1")]),t._v(" "),s("li",[s("code",[t._v("getAndDecrement()")]),t._v(" 自减 1")]),t._v(" "),s("li",[s("code",[t._v("intValue()")]),t._v(" 获取 int 值，原子类型不能替代 int 类型，但是提供了和 int 类型的转换")])]),t._v(" "),s("p",[t._v("原子类更适用于实现线程安全的计数器、累加器等。")]),t._v(" "),s("h2",{attrs:{id:"并发集合类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发集合类"}},[t._v("🎋")]),t._v(" 并发集合类")]),t._v(" "),s("p",[t._v("JDK 5 之前 java.util 包中的大部分集合类都是非线程安全的，JDK 5 在 java.util.concurrent 包中新增了线程安全的集合类，它们的用法与非线程安全的集合类相同，但是保证了线程安全及原子操作。")]),t._v(" "),s("p",[t._v("所有这些集合都通过在将对象添加到集合的操作与访问或删除该对象的后续操作之间定义 happens - before 关系来避免内存一致性错误。对照关系如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("原始集合类")]),t._v(" "),s("th",[t._v("并发安全集合类")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ArrayList")]),t._v(" "),s("td",[t._v("CopyOnWriteArrayList")])]),t._v(" "),s("tr",[s("td",[t._v("Hashtable")]),t._v(" "),s("td",[t._v("ConcurrentHashMap")])]),t._v(" "),s("tr",[s("td",[t._v("Set")]),t._v(" "),s("td",[t._v("CopyOnWriteArraySet")])])])]),t._v(" "),s("p",[t._v("并发安全集合类参考 "),s("RouterLink",{attrs:{to:"/jdk/collection/"}},[t._v("Java 集合 - 并发安全")])],1),t._v(" "),s("h2",{attrs:{id:"并发随机数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发随机数"}},[t._v("🎋")]),t._v(" 并发随机数")]),t._v(" "),s("p",[t._v("JDK 7 新增了 ThreadLocalRandom 类提高并发获取随机数的性能。使用方式为 "),s("code",[t._v("int r = ThreadLocalRandom.current().nextInt(0, 100);")])]),t._v(" "),s("h2",{attrs:{id:"线程局部变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程局部变量"}},[t._v("🎋")]),t._v(" 线程局部变量")]),t._v(" "),s("p",[t._v("ThreadLocal 类用来保存线程局部变量，类内部维护了一个自定义的 ThreadLocalMap 哈希映射，键值对继承 WeakReference ，使用 ThreadLocal 对象作为 key，值作为 value，当 "),s("code",[t._v("get()")]),t._v(" 方法返回空时会自动删除哈希表中的条目。")]),t._v(" "),s("p",[t._v("它作为与线程相关的类私有静态属性，提供了三个方法：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("get()")]),t._v("，获取值")]),t._v(" "),s("li",[s("code",[t._v("set(T)")]),t._v("，设置值")]),t._v(" "),s("li",[s("code",[t._v("remove()")]),t._v("，清除值")])]),t._v(" "),s("p",[t._v("使用方式如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JDK 8 新增 lambada 表达式初始化语法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withInitial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"volatile-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-关键字"}},[t._v("🎋")]),t._v(" volatile 关键字")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("volatile")]),t._v(" 声明变量，降低了内存一致性错误的风险，因为对"),s("code",[t._v("volatile")]),t._v("变量的任何写入都会与该变量的后续读取建立先发生后关系。这意味着对"),s("code",[t._v("volatile")]),t._v("变量的更改始终对其他线程可见。")]),t._v(" "),s("h2",{attrs:{id:"jmm-内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmm-内存模型"}},[t._v("🎋")]),t._v(" JMM 内存模型")]),t._v(" "),s("p",[t._v("TODO")])])}),[],!1,null,null,null);a.default=n.exports}}]);